判断链表中是否有环
题目描述
对于一个给定的链表，返回环的入口节点，如果没有环，返回null
拓展：
你能给出不利用额外空间的解法么？

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *is_huan(ListNode *head)
    {
        if(head == nullptr)
            return nullptr;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            if(slow == fast)
            {
                return slow;
            }
        }
        return nullptr;
    }
    ListNode *detectCycle(ListNode *head) {
        ListNode* prev = is_huan(head);
        if(prev == nullptr)
        {
            return NULL;
        }
        ListNode* cur = head;
        while(cur != prev)
        {
            cur = cur->next;
            prev = prev->next;
        }
        return prev;
    }
};
/*本题思路：
1.判断链表是否有环，使用快慢指针解决,快指针走两步，慢指针走一步
，判断条件为指针不能非法，相遇则有环
2.调用判断有环的函数，慢指针则置于有环相遇的位置，快指针置于头部
都走一步，相遇则循环终止，这便是环的入口，输出慢指针即可。
